# Workflow 이름
name: gyohwanhaja
# 어떤 이벤트가 발생하면 workflow 실행할 지 명시
on:
  # main 브랜치에 push나 pull request 발생 시
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
# 위 이벤트 발생 시 실행될 작업들
jobs:
  build-and-deploy:
    # VM의 실행 환경 지정 => 우분투 최신 버전
    runs-on: ubuntu-latest
    
    # 실행될 jobs를 순서대로 명시
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Build with Gradle
        run: ./gradlew clean build --exclude-task test
      
      - name: Run JAR file
        run: java -jar build/libs/*.jar &
      
      # application.yml 작성
      - name: Create application.yml
        run: echo "${{ secrets.APPLICATION }}" > application.yml
      
      - name: Build Docker image
        run: |
          docker build --pull --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/gyohwanhaja:latest .
          docker build --pull --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/gyohwanhaja:${{ github.sha }} .
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Push Docker images
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/gyohwanhaja:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/gyohwanhaja:${{ github.sha }}
      
      - name: Deploy to EC2 and run Docker container
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: 22
          script: |
            set -e
            echo "Deployment started..."
            
            echo "Checking current running containers:"
            sudo docker ps
            
            # 기존 컨테이너 확인 및 중지
            if sudo docker ps -a --format '{{.Names}}' | grep -q '^gyohwanhaja_app_1$'; then
              echo "Stopping and removing existing container..."
              sudo docker stop gyohwanhaja_app_1 || true
              sudo docker rm gyohwanhaja_app_1 || true
            else
              echo "No existing container found."
            fi
            
            echo "Pulling new Docker image..."
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/gyohwanhaja:latest
            
            echo "Starting new container..."
            sudo docker run -d --name gyohwanhaja_app_1 -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/gyohwanhaja:latest
            
            echo "Verifying new container is running..."
            if sudo docker ps | grep -q gyohwanhaja_app_1; then
              echo "New container is running successfully."
            else
              echo "Error: New container failed to start."
              exit 1
            fi
            
            echo "Cleaning up old images..."
            sudo docker image prune -a -f --filter "until=24h"
            
            echo "Deployment completed successfully."
